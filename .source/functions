### Functions ###

# gCurrency nb usd eur
function gCurrency() { wget -qO- "http://www.google.com/finance/converter?a=$1&from=$2&to=$3&hl=en" | sed '/res/!d;s/<[^>]*>//g'; }

# Box text
function box() { t="$1xxxx";c=${2:-=}; echo ${t//?/$c}; echo "$c $1 $c"; echo ${t//?/$c}; }

function cleanKill() { kill -s HUP $1; sleep 1 ; kill -s KILL $1 > /dev/null 2>1;}

# http://www.macosxhints.com/article.php?story=20091003083125659

# alias rm='del'
  # make rm(1) safe.
  # Remove or comment-out this line to return to normal rm(1) functionality.

function del() {
  if declare -F trash >/dev/null
  then
    trash "$@"
  else
    command rm -i "$@"
  fi
}

function trash() {
  local F
  local HOME_DEVICE="$(stat -f %Sd "$HOME")"
  local TRASHCAN=~/.Trash
  # Set this in advance _outside_ the loop below
  for F in "$@"
  do
    if ! test -e "$F"
    then
      echo "No such file or directory: $F" 1>&2
      return 4
    fi

    local DEVICE="$(stat -f %Sd "$F")"

    if [ x"$DEVICE" == x"" ] || [ x"$DEVICE" == x"???" ]
    then
      echo "Can't locate trash for ${F}." 1>&2
      return 3
    fi

    if [ x"$DEVICE" != x"$HOME_DEVICE" ]
    then
      TRASHCAN="$(trashOnDevice "$DEVICE")"
    fi

    if [ ! -d "${TRASHCAN}" ]
    then
      command rm -f "${TRASHCAN}"
      if ! mkdir -m 700 "${TRASHCAN}"
      then
        echo "$TRASHCAN is inaccessible at this time." | sed 's;'"$HOME"';~;g' 1>&2
        return 1
      fi
    fi

    local FinT="$(basename "$F")"

    if [ -e "${TRASHCAN}/${FinT}" ]
    then
      FinT="$(date) ${FinT}"
    fi

    if ! mv -vn "$F" "${TRASHCAN}/${FinT}"
    then
      echo "Unable to move $F to the trash." 1>&2
      return 2
    fi
  done

  local TRASHSIZE="$(du -hs "${TRASHCAN}" 2>/dev/null | cut -f 1)"
  local TRASHCANloc="$(dirname "$TRASHCAN" | sed 's;^/Volumes/\(.*\)/.Trashes;\1;g' | sed 's;'"$HOME"';~;g' | sed 's;^/.Trashes;/;g')"
  # echo "${TRASHSIZE:-  0B} in trash on $TRASHCANloc."
}

function emptytrash() {
  local TMPIFS="$IFS"
  IFS='
'
  local MOUNTS=( $(mount | sed -n 's:/dev/.* on \(.*\) (.*):\1:p') )
  local TRASHCANs=( "${HOME}/.Trash" $(IFS="$TMPIFS";for i in `seq 0 $(( ${#MOUNTS[@]} - 1 ))`; do echo "${MOUNTS[$i]}/.Trashes/$(id -u)"; done) )
  IFS="$TMPIFS"
  unset TMPIFS

  local TRASH_SIZE
  TRASH_SIZE="$( (for i in "${TRASHCANs[@]}"; do ls "$i"/; done) 2>/dev/null | wc -w)"
  if [ "$TRASH_SIZE" -gt 0 ]
  then
    echo -n "Emptying trash"
    for i in "${TRASHCANs[@]}"
    do
      tput smcup
      pushd "$i" 2>/dev/null && {
        srm -frsvz . 2>/dev/null ; popd ;
      }
      tput rmcup
      echo -n .
    done
    local DONE=
    [ `ls "${HOME}/.Trash" | wc -w` == 0 ] && DONE="Done."
    echo "$DONE"
  else
    echo "Trash is empty."
  fi
}

function trashOnDevice() {
  local DEVICE="$1"
  local MOUNT="$(mount | sed -n 's:/dev/'"$DEVICE"' on \(.*\) (.*):\1:p')"

  if [ x"$MOUNT" == x"" ] || [ x"$MOUNT" == x"???" ]
  then
    # If no mount point is found, then don't return the path to root!
    return 1
  elif [ x"$MOUNT" == x"/" ]
  then
    # Encourage the resulting path to _not_ start with two slashes
    MOUNT=""
  fi

  echo "$MOUNT/.Trashes/$UID"
}

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# function title() {
#   echo -e "\033];$1\007"
# }

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Gzip-enabled `curl`
function gurl() {
  curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

function mcd() { mkdir -p "${@}" && cd "${1}"; }

# Extract most know archives with one command
function extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Find text in any file
function ft() {
     find . -name "$2" -exec grep -il "$1" {} \;
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Usage : seq n m [i]
# echo all integers between n and m using a skip or increment of i
# function seq ()
# {
#   [ "$1" ] || [ "$2" ] || return 1

#   local x=$1;
#   local y=$2;
#   local i=${3:-1};
#   local seperator="${4:- }"
#   while [ $x -le $y ]
#   do
#     echo -n $x"${seperator}";
#     x=$(( $x + $i ));
#   done
#   echo
# }

